name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Триггер на push в main
  pull_request:
  workflow_dispatch: # Allow manual trigger

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./src/requirements.txt  # Install deps before building image

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build # Run tests after image is built
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./src/requirements.txt

      - name: Run unit tests
        run: |
          cd src/tests
          pytest --alluredir=allure-results user_tests.py product_tests.py product_cart_tests.py product_order_tests.py payment_tests.py order_tests.py cart_tests.py  # No parallel mode

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: src/tests/allure-results
        if: always() # Upload even if tests fail

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: unit_tests # Deploy only if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            docker stop your-container || true
            docker rm your-container || true
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${GITHUB_SHA }}  # Pull the built image
            docker run -d -p 80:80 --name your-container ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${GITHUB_SHA }} # Re-run with new image
